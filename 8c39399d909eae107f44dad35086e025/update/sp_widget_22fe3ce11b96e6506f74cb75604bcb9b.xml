<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope,$http,spUtil,$interval,$timeout) {
	/* widget controller */
	var c = this;

	spUtil.recordWatch($scope, 'x_snc_agenda_day', 'sys_id=' + c.data.param.day, function(name) {
		refreshData();
	});


	refreshData();

	$interval(function(){

		if (c.data.state.timerRunning) {

			if (c.data.result.timer.sum > 0) {
				c.data.result.timer.sum--;		
			}
			var now = new Date();
			calculateReturnTime();

			if (c.data.result.timer.sum == 0 ) {
				console.log('Timer expired');
				c.data.state.timerRunning = false;
				// c.data.state.alarmSound = true;				
			}
		} else {
			if (c.data.result.timer.sum == 0) {
				c.data.state.alarmSound = false;
				if (!c.data.state.alarmStop) {
					$timeout(function() {
						c.data.state.alarmSound = true;
					}, 1000);
				}
			}
		}
		var h = Math.floor(c.data.result.timer.sum % (3600*24) / 3600);
		var m = Math.floor(c.data.result.timer.sum % 3600 / 60);
		var s = Math.floor(c.data.result.timer.sum % 60);

		c.data.result.timer.hours = ("00" + h).slice(-2);
		c.data.result.timer.minutes = ("00" + m).slice(-2);
		c.data.result.timer.seconds = ("00" + s).slice(-2);

	}, 1000, c.data.result.timer.sum);

	$scope.alarmStop = function() {
		c.data.state.timerRunning = false;
		c.data.state.alarmSound = false;
		c.data.state.alarmStop = true;
	}

	function calculateReturnTime() {

		var now = new Date();
		now.setSeconds(now.getSeconds() + c.data.result.timer.sum);
		const simpleTimeString = now.toLocaleTimeString(undefined, { 
			timeZone: c.data.result.timer.timezone,
			hour: 'numeric', 
			minute: '2-digit' 
		});
		// console.log(simpleTimeString);
		c.data.result.timer.returnAt = simpleTimeString;

	}

	function refreshData() {

		var url = '/api/x_snc_agenda/agenda?day=' +
				c.data.param.day;

		console.log('refreshData(): url=' + url);

		$http({
			"method" : "GET",
			"url" : url,
			"headers" : {"Content-type" : "application/json"}
		}).then(function success(response) {
			var status = response.data.result.status;
			var msg = response.data.result.message;
			if (status != "ok") {
				spUtil.addErrorMessage(msg);
				c.data.result = JSON.parse(JSON.stringify(response.data.result));
				c.data.state.isLoading = false;

			} else {
				c.data.result = JSON.parse(JSON.stringify(response.data.result));
				c.data.state.isLoading = false;
				calculateReturnTime();
			}
		}, function failure(response) {
			var msg = response.data.result.message;
			spUtil.addErrorMessage(msg);
		});
	}

};]]></client_script>
        <controller_as>c</controller_as>
        <css>/* style.css or within a component's stylesheet */

/*******************/
/* Color variables */
/*******************/

$left-title-fg: white;
$left-title-bg: #042D42;
$border-color: #042D42;
$course-title-bg: #042D42;
$course-title-fg: white;
$course-name-bg: #042d42;
$course-name-fg: white;
$course-sub-bg: #C2E6FF;
$course-sub-fg: #042d42;
$day-title-bg: #042D42;
$day-title-fg: white;
$module-inactive-bg: #ddd;
$module-inactive-fg: #888;
$module-active-bg: #035D99;
$module-active-fg: white;
$now-title-fg: #005F1E;
$now-title-bg: #63DF4E;
$now-item-fg: #042d42;
$now-item-bg: #C2E6FF;
$timer-button-bg: #52B8FF;
$timer-button-fg: #042d42;
$timer-count-bg: #042D42;
$timer-count-fg: #C2E6FF;
$timer-return-bg: #C2E6FF;
$timer-return-fg: #042D42;
$error-bg: #FDF7F7;
$error-fg: #A02623;

/******************/
/* Course section */
/******************/

.courseName,
.courseVersion,
.courseInstructor {
  border-radius: 10px;
  text-align: center;
}

.courseName {
  background-color: $course-title-bg;
  color: $course-title-fg;
  font-size: 4rem;
  text-align: center;
  padding: 10px;
}

.courseVersion,.courseInstructor {
  background-color: $course-sub-bg;
  color: $course-sub-fg;
  margin-top: 10px;
  padding: 5px;
  font-size: 2rem;
}

/******************/
/* Module section */
/******************/

.moduleActive {
  background-color: $module-active-bg;
  color: $module-active-fg;
  border-radius: 10px;
}

.moduleInactive {
  background-color: $module-inactive-bg;
  color: $module-inactive-fg;
  border-radius: 10px;
}

.moduleItem { 
  margin-top: 5px;
  margin-bottom: 5px;
}

.moduleTitle {
  padding: 5px;
  font-size: 2rem;
}

.moduleShortDescription {
  font-weight: normal;
}

.moduleTitle {
  font-weight: bold;
}

.li#moduleShortDescription {
}

/***************/
/* Now section */
/***************/

.nowItem {
  background-color: $now-item-bg;
  color: $now-item-fg;
  border-radius: 10px;
  margin-top: 5px;
  margin-bottom: 5px;
  border-radius: 10px;
  font-size: 2rem;
  padding: 10px;
}

/*****************/
/* Timer section */
/*****************/

.timerCounter,.timerButton,.timerReturn {
  text-align: center;
  border-radius: 10px;
  padding: 5px;
  margin-top: 5px;
  margin-bottom: 5px;
}

.timerCounter {
  background-color: $timer-count-bg;
  color: $timer-count-fg;
  font-size: 6em;
  font-family: 'Courier New';
  margin: 5px;
}

.timerButtonRow {
    margin: 5px;
}

.timerButton {
  background-color: $timer-button-bg;
  color: $timer-button-fg;
  font-size: 2em;
}

.timerReturn {
  background-color: $timer-return-bg;
  color: $timer-return-fg;
  font-size: 2em;
  margin: 5px;
}

/************************/
/* Rotated title blocks */
/************************/

.rotate {

  transform: rotate(-90deg);


  /* Legacy vendor prefixes that you probably don't need... */

  /* Safari */
  -webkit-transform: rotate(-90deg);

  /* Firefox */
  -moz-transform: rotate(-90deg);

  /* IE */
  -ms-transform: rotate(-90deg);

  /* Opera */
  -o-transform: rotate(-90deg);

  /* Internet Explorer */
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);

}

,uppercase {
  text-transform: uppercase;
}


@import "bourbon";

@import url(https://fonts.googleapis.com/css?family=Open+Sans);

*, *:before, *:after {
  -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;
}

body { 
  font-family: 'Open Sans', sans-serif; 
  margin-top: 50px;
}

section {
  width: 100%;
  margin: 10px auto;
  font-size: 2rem;
}

.wrapper {
  /*  $border-color: rgba(orange, 1); */
  width: 100%;
  min-height: 150px; 
  position: relative;
  border: 2px solid $border-color;
  border-left: 40px solid $border-color;
  padding: 15px;
  /* color: rgba(black, 0.5); */
  font-size: 1.5rem;
  display: inline-block;

  .leftTitle {
    font-size: 2rem;
    color: $left-title-fg;
    text-transform: uppercase;
    letter-spacing: 3px;

    position: absolute;
    bottom: 0;
    left: 0;
    margin-left: -35px;

    @include transform(rotate(270deg));
    @include transform-origin(0 0);
  }

}

.widgetWrapper {
    font-family: Trebuchet,Arial,Helvetica,sans-serif;
}

.loading {
  font-size: 2rem;
}

.error {
  background-color: $error-bg;
  color: $error-fg;
  font-size: 2rem;
  padding: 10px;
  border-radius: 10px;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>agenda</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>agenda</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */

	data.param = {
		"day" : $sp.getParameter('day'),
		"debug" : $sp.getParameter('debug') == "true"
	};
	
	data.state = {
		"isLoading" : true,
		"timerRunning" : false,
		"alarmSound" : false,
		"alarmStop" : false
	};
	
	data.result = {
		"timer" : {
			"sum" : 0,
			"returnAt" : ""
		}
	};
	
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>chuck.tomasi@gmail.com</sys_created_by>
        <sys_created_on>2025-06-22 13:37:18</sys_created_on>
        <sys_id>22fe3ce11b96e6506f74cb75604bcb9b</sys_id>
        <sys_mod_count>143</sys_mod_count>
        <sys_name>agenda</sys_name>
        <sys_package display_value="Agenda Builder" source="x_snc_agenda">8c39399d909eae107f44dad35086e025</sys_package>
        <sys_policy/>
        <sys_scope display_value="Agenda Builder">8c39399d909eae107f44dad35086e025</sys_scope>
        <sys_update_name>sp_widget_22fe3ce11b96e6506f74cb75604bcb9b</sys_update_name>
        <sys_updated_by>chuck.tomasi@gmail.com</sys_updated_by>
        <sys_updated_on>2025-07-06 21:17:27</sys_updated_on>
        <template><![CDATA[<div class="widgetWrapper">

  <div class="loading" ng-if="c.data.state.isLoading">
    <i class="fa fa-spinner fa-spin" aria-hidden="true"></i> ${agenda-loading}
  </div>

  <div ng-if="!c.data.state.isLoading">

    <div class="error" ng-if="c.data.result.status == 'error'">
      {{c.data.result.message}}
    </div>

    <div ng-if="c.data.result.status == 'ok'">
      <div ng-include="'agenda-course'"></div>

      <div ng-if="c.data.result.display.day">
        <div ng-include="'agenda-day'"></div>
      </div>

      <div ng-if="c.data.result.display.now">
        <div ng-include="'agenda-now'"></div>
      </div>

      <div ng-if="c.data.result.display.timer">
        <div ng-include="'agenda-timer'"></div>
      </div>

    </div>

  </div>

  <div ng-if="c.data.param.debug">
    <pre>{{c.data | json}}</pre>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
