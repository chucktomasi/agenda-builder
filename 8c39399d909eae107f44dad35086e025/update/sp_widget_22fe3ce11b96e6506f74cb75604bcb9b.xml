<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope,$http,spUtil,$interval,$timeout) {
	/* widget controller */
	var c = this;

	readAgenda(); // initial data fetch

	/***************************************************************
	 * Refresh the data from the day record if there are any changes
	 ***************************************************************/
	spUtil.recordWatch($scope, 'x_snc_agenda_day', 'sys_id=' + c.data.param.day, function(name) {
		console.log('==>recordWatch()');
		readAgenda();
		console.log('<==recordWatch()');
	});

	/***************************************************************
	 * The main function that runs the countdown timer and alarm
	 ***************************************************************/
	$interval(function(){

		if (c.data.result.timer.state.isRunning) {

			var nowStr = formattedDateTime(); // Get client time with TZ
			var nowDate = new Date(nowStr);
			var returnAt = new Date(c.data.result.timer.returnAtLong);  // Date object
			var diff = Math.floor((returnAt.getTime() - nowDate.getTime()) / 1000);
			if (diff < 0) {
				diff = 0;
			}
			c.data.result.timer.sum = diff;

			// calculateReturnTime(); // Updates in case it was paused

			if (c.data.result.timer.sum > 0) {
				c.data.result.timer.sum--;		
			}

			// When the countdown reaches zero, stop the timer
			if (c.data.result.timer.sum == 0 ) {
				console.log('Timer expired');
				c.data.result.timer.state.isRunning = false;
			}
		} else {
			// Sound the alarm
			if (c.data.result.timer.sum == 0) {
				c.data.state.alarm.sound = false;
				if (!c.data.state.alarm.stop) {
					$timeout(function() {
						c.data.state.alarm.sound = true;
					}, 1000);
				}
			}
		}

		// Update the variables that display the countdown timer
		var h = Math.floor(c.data.result.timer.sum % (3600*24) / 3600);
		var m = Math.floor(c.data.result.timer.sum % 3600 / 60);
		var s = Math.floor(c.data.result.timer.sum % 60);

		c.data.result.timer.hours = ("00" + h).slice(-2);
		c.data.result.timer.minutes = ("00" + m).slice(-2);
		c.data.result.timer.seconds = ("00" + s).slice(-2);

	}, 1000, c.data.result.timer.sum);

	/***************************************************************
   * Current date/time string
	 *
	 * @param JS date object; default now
	 * @return formatted date time using user's timezone
	 ***************************************************************/
	function formattedDateTime(dateObjParam) {

		var dateObj = dateObjParam || new Date();

		// Options for formatting the date and time
		var options = {
			year: 'numeric',
			month: '2-digit',
			day: '2-digit',
			hour: '2-digit',
			minute: '2-digit',
			second: '2-digit',
			hour12: false, // Use 24-hour format
			timeZone: c.data.result.timer.timezone // Apply the specified timezone
		};

		// Create a DateTimeFormat object with the desired options
		var formatter = new Intl.DateTimeFormat('en-US', options);

		// Format the date and time
		var parts = formatter.formatToParts(dateObj);

		// Extract and combine the parts to form the yyyy-MM-dd HH:mm:ss string
		const year = parts.find(p => p.type === 'year').value;
		const month = parts.find(p => p.type === 'month').value;
		const day = parts.find(p => p.type === 'day').value;
		const hour = parts.find(p => p.type === 'hour').value;
		const minute = parts.find(p => p.type === 'minute').value;
		const second = parts.find(p => p.type === 'second').value;

		return year + "-" +
			month + "-" +
			day + " " +
			hour + ":" +
			minute + ":" + second;
	}

	/***************************************************************
   * Sum up the duration of now items
	 ***************************************************************/
	function calculateNowItemSum() {

		var sum = 0;
		for (var i = 0; i < c.data.result.now.length; i++) {
			sum += c.data.result.now[i].duration;
		}

		return sum;

	}

	/***************************************************************
   * Note the agenda details
	 ***************************************************************/
	function nowItemDetails() {

		var details = [];

		for (var i = 0; i < c.data.result.now.length; i++) {
			var item = c.data.result.now[i];
			var str = item.title;
			if (item.short_description) {
				str += " - " + item.short_description;
			}
			str += " (" + item.durationStr + ")";
			details.push("<li>" + str + "</li>");
		}

		return details.join('\n');

	}

	/***************************************************************
	 * The Stop button has been pressed
	 * Stop the timer (if running) and turn off the alarm sound
	 ***************************************************************/
	$scope.alarmStop = function() {

		c.data.result.timer.state.isRunning = false;
		c.data.state.alarm.sound = false;
		c.data.state.alarm.stop = true;

		c.data.log.end = formattedDateTime();
		c.data.log.duration = calculateNowItemSum();
		writeAgenda();
		sendLog({
			"id"         : c.data.log.id,
			"end"        : c.data.log.end,
			"duration"   : c.data.log.duration,
			"extended"   : c.data.log.extended,
			"details"    : nowItemDetails()

		});
	}

	/***************************************************************
   * Start the timer and note the current state as running.
	 * 'running' is the current state. Pausing or stopping sets false
	 * 'started' is set once and only false when result.sum == 0
	 ***************************************************************/
	$scope.startTimer = function() {

		if (!c.data.result.timer.state.isStarted) {
			c.data.log.start = formattedDateTime();
		}

		c.data.result.timer.state.isRunning = true;
		c.data.result.timer.state.isStarted = true;
		c.data.state.alarm.stop = false;
		calculateReturnTime(); // Updates in case it was paused
		writeAgenda(); // Send the new data back to the server
		sendLog({
			"id"         : c.data.log.id,
			"course"     : c.data.log.course,
			"version"    : c.data.log.version,
			"instructor" : c.data.log.instructor,
			"start"      : c.data.log.start,
			"extended"   : c.data.log.extended
		});
	}


	/***************************************************************
   * Stop the running timer momentarily
	 ***************************************************************/
	$scope.pauseTimer = function() {

		console.log('==>PAUSE');
		c.data.result.timer.state.isRunning = false;
		writeAgenda();
		console.log('<==PAUSE');

	}

	/***************************************************************
   * Log data to the server
	 ***************************************************************/
	function sendLog(logObj) {

		console.log('==>sendLog('+ JSON.stringify(logObj, null, 4) + ')');
		// c.data.log.details = nowItemDetails();
		var url = '/api/x_snc_agenda/agenda/log';

		$http({
			"method" : "POST",
			"url" : url,
			"data" : logObj,
			"headers" : {"Content-type" : "application/json"}
		}).then(function success(response) {
			var status = response.data.result.status;
			var msg = response.data.result.message;

			if (status != "ok") {
				spUtil.addErrorMessage(msg);

			} else {
				console.log('<==sendLog()');
			}
		}, function failure(response) {
			var msg = response.data.result.message;
			spUtil.addErrorMessage(msg);
		});
	}

	/***************************************************************
   * Add an extension to the timer for a given duration by calling
	 * the API. The displayed timer is also updated.
	 ***************************************************************/
	$scope.addTime = function(duration) {

		console.log('==>addTime(): duration=' + duration);
		var url = '/api/x_snc_agenda/agenda/add_time';
		var body = {
			"addSec" : duration,
			"day" : c.data.result.day.sys_id,
			"course" : c.data.result.course.sys_id
		};

		c.data.state.timer.oldSum = c.data.result.timer.sum;
		c.data.log.extended = true;

		$http({
			"method" : "POST",
			"url" : url,
			"data" : body,
			"headers" : {"Content-type" : "application/json"}
		}).then(function success(response) {
			var status = response.data.result.status;
			var msg = response.data.result.message;
			// No need to update any part of c.data.result
			// Adding this record automatically triggers readAgenda()
			// and all new time values are updated
			if (status != "ok") {
				spUtil.addErrorMessage(msg);
			} else {
				calculateReturnTime();
				// writeAgenda();
				// sendLog();
				console.log('<==addTime()');
			}
		}, function failure(response) {
			var msg = response.data.result.message;
			spUtil.addErrorMessage(msg);
		});
	}

	/***************************************************************
   * Show/hide a section of the form defined by an object's
	 * sys_id. This is used for the student notes on modules and
	 * now items.
	 ***************************************************************/
	$scope.toggle = function(obj) {

		//console.log('toggle: ' + obj.sys_id);
		var el = document.getElementById(obj.sys_id);

		if (el.style.display === "block") {
			el.style.display = "none";
		} else {
			el.style.display = "block";
		}

	}

	/***************************************************************
   * Based on the current amount of time left and the user's
	 * timezone, determine when students should return. While
	 * this is available from the server in the initial timer object,
	 * the instructor may press pause for a few minutes. This value
	 * is recalculated when the timer is started again.
	 ***************************************************************/
	function calculateReturnTime() {

		console.log('==>calculateReturnTime: returnAtLong=' + c.data.result.timer.returnAtLong);

		var now = new Date();
		now.setSeconds(now.getSeconds() + c.data.result.timer.sum);

		const simpleTimeString = now.toLocaleTimeString(undefined, { 
			timeZone: c.data.result.timer.timezone,
			hour: 'numeric', 
			minute: '2-digit' 
		});
		// console.log(simpleTimeString);
		c.data.result.timer.returnAt = simpleTimeString;
		c.data.result.timer.returnAtLong = formattedDateTime(now);

		console.log('<==calculateReturnTime: returnAtLong=' + c.data.result.timer.returnAtLong);

	}

	/***************************************************************
   * Calculate the total amount of time left on the counter
	 *
	 * Initially before the counter starts, this is the sum of all
	 * item durations in the 'now' list. Once the timer starts,
	 * it is the combination of the current value plus anything added
	 * to keep the running timer running w/o starting over.
	 ***************************************************************/
	function updateTimeSum() {

		// If the timer isn't started, don't need to look at itemsUsed, right?

		console.log('==>updateTimeSum(): timer.sum='+ c.data.result.timer.sum);
		console.log('   updateTimeSum(): timer.state.isRunning=' + c.data.result.timer.state.isRunning);
		console.log('   updateTimeSum(): timer.state.isStarted=' + c.data.result.timer.state.isStarted);
		console.log('   updateTimeSum(): timer.state.isCurrent=' + c.data.result.timer.state.isCurrent);
		console.log('   updateTimeSum(): state.timer.oldSum=' + c.data.state.timer.oldSum);
		var sec = c.data.result.timer.state.isStarted ? c.data.result.timer.sum : 0;
		sec += c.data.state.timer.oldSum;
		c.data.state.timer.oldSum = 0;
		var writeAgendaFlag = false;

		console.log('   updateTimeSum(): sec=' + sec);

		if (c.data.result.timer.state.isStarted) {
			for (var i = 0; i < c.data.result.now.length; i++) {
				var itemA = c.data.result.now[i];
				// Only sum up the items not previously used
				if (!c.data.result.timer.state.itemsUsed.includes(itemA.sys_id)) {
					sec += itemA.duration;
					c.data.result.timer.state.itemsUsed.push(itemA.sys_id);
					console.log('   updateTimeSum(): adding ' + itemA.duration + ' - ' + itemA.sys_id);
					writeAgendaFlag = true;
				}
			}

		} else {
			// Timer not started, so count everything - if the agenda is not current
			if (!c.data.result.timer.state.isCurrent) {
				sec = 0;
				c.data.result.timer.state.itemsUsed = [];
				for (var j = 0; j < c.data.result.now.length; j++) {
					var itemB = c.data.result.now[j];
					// Only sum up all the items
					sec += itemB.duration;
					c.data.result.timer.state.itemsUsed.push(itemB.sys_id);
					console.log('   updateTimeSum(!isCurrent): adding ' + itemB.duration + ' - ' + itemB.sys_id);
					writeAgendaFlag = true;
				}

			} else {
				sec = c.data.result.timer.sum;
			}

		}
		c.data.result.timer.sum = sec;			

		console.log('<==updateTimeSum(): timer.sum='+ c.data.result.timer.sum);
		if (writeAgendaFlag) {
			writeAgenda();
		}
	}

	/***************************************************************
   * Call the REST API to refresh the agenda data
	 *
	 * This is done initially when the widget is loaded and
	 * any time the day record content is updated to remove the
	 * need for the user to refresh the widget
	 ***************************************************************/
	function readAgenda() {

		var url = '/api/x_snc_agenda/agenda?day=' +
				c.data.param.day;

		console.log('==>readAgenda()');

		$http({
			"method" : "GET",
			"url" : url,
			"headers" : {"Content-type" : "application/json"}
		}).then(function success(response) {
			var status = response.data.result.status;
			var msg = response.data.result.message;

			if (status != "ok") {
				spUtil.addErrorMessage(msg);
				c.data.result = JSON.parse(JSON.stringify(response.data.result));
				c.data.state.isLoading = false;

			} else {

				c.data.result = JSON.parse(JSON.stringify(response.data.result));
				c.data.state.isLoading = false;
				// Flesh out the timer object if it didn't come from the server
				if (!c.data.result.timer.hasOwnProperty('returnAtLong')) {

					calculateReturnTime();

					c.data.result.timer.state = {
						"isRunning" : false,
						"isStarted" : false,
						"isCurrent" : false,
						"itemsUsed" : []
					};

				}
				if (!c.data.result.timer.state.isRunning) {
					updateTimeSum();
					calculateReturnTime();			
				}

				// Initialize values in the log object
				c.data.log.course = c.data.result.course.name;
				c.data.log.version = c.data.result.course.sn_version;
				c.data.log.instructor = c.data.result.course.instructor;
				c.data.log.id              = c.data.result.id;
				if (c.data.result.newlog) {
					console.log('   readAgenda(): new log: Clearing log details...');
					c.data.log.start           = "";
					c.data.log.end             = "";
					c.data.log.details         = "";
					c.data.log.extended        = false;
				}
				if (!c.data.result.timer.state.isStarted) {
					console.log('   readAgenda(): timer not started: Clearing log details...');
					c.data.log.start = "";				
				}
			}
		}, function failure(response) {
			var msg = response.data.result.message;
			spUtil.addErrorMessage(msg);
		});
	}

	/***************************************************************
   * Call the REST API to update the server agenda data
	 *
	 * This is done for persistence in the event the browser is
	 * refreshed, crashes, etc.
	 ***************************************************************/
	function writeAgenda() {

		var url = '/api/x_snc_agenda/agenda/update';
		// console.log('writeAgenda()');
		c.data.result.timer.state.isCurrent = true;

		$http({
			"method" : "POST",
			"url" : url,
			"data" : c.data.result,
			"headers" : {"Content-type" : "application/json"}
		}).then(function success(response) {
			var status = response.data.result.status;
			var msg = response.data.result.message;
			if (status != "ok") {
				spUtil.addErrorMessage(msg);

			} else {
				console.log('writeAgenda(): server data updated');
			}
		}, function failure(response) {
			var msg = response.data.result.message;
			spUtil.addErrorMessage(msg);
		});
	}


};]]></client_script>
        <controller_as>c</controller_as>
        <css>/* style.css or within a component's stylesheet */

/*******************/
/* Color variables */
/*******************/

$left-title-fg: white;
$left-title-bg: #042D42;
$border-color: #042D42;
$course-title-bg: #042D42;
$course-title-fg: white;
$course-name-bg: #042d42;
$course-name-fg: white;
$course-sub-bg: #C2E6FF;
$course-sub-fg: #042d42;
$day-title-bg: #042D42;
$day-title-fg: white;
$module-inactive-bg: #ddd;
$module-inactive-fg: #888;
$module-active-bg: #035D99;
$module-active-fg: white;
$now-title-fg: #005F1E;
$now-title-bg: #63DF4E;
$now-item-fg: #042d42;
$now-item-bg: #C2E6FF;
$timer-button-bg: #52B8FF;
$timer-button-fg: #042d42;
$add-time-button-bg: #E6DBFF;
$add-time-button-fg: #3C288D;
$timer-count-bg: #042D42;
$timer-count-fg: #C2E6FF;
$timer-return-bg: #C2E6FF;
$timer-return-fg: #042D42;
$error-bg: #FDF7F7;
$error-fg: #A02623;
$comment-fg: #BF71F2;
$student-note-bg: #E6DBFF;
$student-note-fg: #444;

/******************/
/* Course section */
/******************/

.courseName,
.courseVersion,
.courseInstructor {
  border-radius: 10px;
  text-align: center;
}

.courseName {
  background-color: $course-title-bg;
  color: $course-title-fg;
  font-size: 4rem;
  text-align: center;
  padding: 10px;
}

.courseVersion,.courseInstructor {
  background-color: $course-sub-bg;
  color: $course-sub-fg;
  margin-top: 10px;
  padding: 5px;
  font-size: 2rem;
}

.comment {
  background-color: transparent;
}

.fa-comment {
  color: $comment-fg;
}

.student_note {
  font-size: 1.5rem;
  padding: 0 18px;
  display: none;
  overflow: hidden;
  background-color: $student-note-bg;
  color: $student-note-fg;
}

/******************/
/* Module section */
/******************/

.moduleActive {
  background-color: $module-active-bg;
  color: $module-active-fg;
  border-radius: 10px;
}

.moduleInactive {
  background-color: $module-inactive-bg;
  color: $module-inactive-fg;
  border-radius: 10px;
}

.moduleItem { 
  margin-top: 5px;
  margin-bottom: 5px;
}

.moduleTitle {
  padding: 5px;
  font-size: 2rem;
}

.moduleShortDescription {
  font-weight: normal;
}

.moduleTitle {
  font-weight: bold;
}

.li#moduleShortDescription {
}

/***************/
/* Now section */
/***************/

.nowItem {
  background-color: $now-item-bg;
  color: $now-item-fg;
  border-radius: 10px;
  margin-top: 5px;
  margin-bottom: 5px;
  border-radius: 10px;
  font-size: 2rem;
  padding: 10px;
}

/*****************/
/* Timer section */
/*****************/

.timerCounter,.timerButton,.timerReturn,.addTimeButton {
  text-align: center;
  border-radius: 10px;
  padding: 5px;
  margin-top: 5px;
  margin-bottom: 5px;
}

.timerCounter {
  background-color: $timer-count-bg;
  color: $timer-count-fg;
  font-size: 10vw;
  font-family: 'Courier New';
  margin: 5px;
}

.timerButtonRow {
    margin: 5px;
}

.timerButton {
  background-color: $timer-button-bg;
  color: $timer-button-fg;
  font-size: 2em;
}

.addTimeButton {
  background-color: $add-time-button-bg;
  color: $add-time-button-fg;
  font-size: 4vw;
}

.timerReturn {
  background-color: $timer-return-bg;
  color: $timer-return-fg;
  font-size: 2em;
  margin: 5px;
}

/************************/
/* Rotated title blocks */
/************************/

.rotate {

  transform: rotate(-90deg);


  /* Legacy vendor prefixes that you probably don't need... */

  /* Safari */
  -webkit-transform: rotate(-90deg);

  /* Firefox */
  -moz-transform: rotate(-90deg);

  /* IE */
  -ms-transform: rotate(-90deg);

  /* Opera */
  -o-transform: rotate(-90deg);

  /* Internet Explorer */
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);

}

,uppercase {
  text-transform: uppercase;
}


@import "bourbon";

@import url(https://fonts.googleapis.com/css?family=Open+Sans);

*, *:before, *:after {
  -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;
}

body { 
  font-family: 'Open Sans', sans-serif; 
  margin-top: 50px;
}

section {
  width: 100%;
  margin: 10px auto;
  font-size: 2rem;
}

.wrapper {
  /*  $border-color: rgba(orange, 1); */
  width: 100%;
  min-height: 150px; 
  position: relative;
  border: 2px solid $border-color;
  border-left: 40px solid $border-color;
  padding: 15px;
  /* color: rgba(black, 0.5); */
  font-size: 1.5rem;
  display: inline-block;

  .leftTitle {
    font-size: 2rem;
    color: $left-title-fg;
    text-transform: uppercase;
    letter-spacing: 3px;

    position: absolute;
    bottom: 0;
    left: 0;
    margin-left: -35px;

    @include transform(rotate(270deg));
    @include transform-origin(0 0);
  }

}

.widgetWrapper {
    font-family: Trebuchet,Arial,Helvetica,sans-serif;
}

.loading {
  font-size: 2rem;
}

.error {
  background-color: $error-bg;
  color: $error-fg;
  font-size: 2rem;
  padding: 10px;
  border-radius: 10px;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>agenda</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>agenda</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */

	// URL parameters
	data.param = {
		"day" : $sp.getParameter('day'),
		"debug" : $sp.getParameter('debug') == "true"
	};

	// Internal state controls
	data.state = {
		"isLoading" : true,
		"alarm" : {
			"sound" : false,
			"stop" : false
		},
		"timer" : {
			"oldSum" : 0
		}
	};

	// Render the agenda (API data added here)
	
	data.result = {
		"timer" : {
			"sum"          : 0,
			"hours"        : "00",
			"minutes"      : "00",
			"seconds"      : "00",
			"returnAt"     : "",
			"state" : {
				"isRunning" : false, // Is the timer currently running
				"isStarted" : false, // Has the timer been started?
				"isCurrent" : false, // Is the timer object up to date?
				"itemsUsed" : []
			}
		}
	};	

	// Track the lab timing
	data.log = {
		"id" : "",
		"course" : "",
		"version" : "",
		"instructor" : "",
		"start" : "",
		"end" : "",
		"duration" : 0,
		"extended" : false,
		"details" : ""
	};

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>chuck.tomasi@gmail.com</sys_created_by>
        <sys_created_on>2025-06-22 13:37:18</sys_created_on>
        <sys_id>22fe3ce11b96e6506f74cb75604bcb9b</sys_id>
        <sys_mod_count>337</sys_mod_count>
        <sys_name>agenda</sys_name>
        <sys_package display_value="Agenda Builder" source="x_snc_agenda">8c39399d909eae107f44dad35086e025</sys_package>
        <sys_policy/>
        <sys_scope display_value="Agenda Builder">8c39399d909eae107f44dad35086e025</sys_scope>
        <sys_update_name>sp_widget_22fe3ce11b96e6506f74cb75604bcb9b</sys_update_name>
        <sys_updated_by>chuck.tomasi@gmail.com</sys_updated_by>
        <sys_updated_on>2025-09-05 18:04:27</sys_updated_on>
        <template><![CDATA[<meta name="viewport" content="width=device-width, initial-scale=1.0">

<div class="widgetWrapper">

  <div class="loading" ng-if="c.data.state.isLoading">
    <i class="fa fa-spinner fa-spin" aria-hidden="true"></i> ${agenda-loading}
  </div>

  <div ng-if="!c.data.state.isLoading">

    <div class="error" ng-if="c.data.result.status == 'error'">
      {{c.data.result.message}}
    </div>

    <div ng-if="c.data.result.status == 'ok'">
      <div ng-include="'agenda-course'"></div>

      <div ng-if="c.data.result.display.day">
        <div ng-include="'agenda-day'"></div>
      </div>

      <div ng-if="c.data.result.display.now">
        <div ng-include="'agenda-now'"></div>
      </div>

      <div ng-if="c.data.result.display.timer">
        <div ng-include="'agenda-timer'"></div>
      </div>

    </div>

  </div>
</div>
<div ng-if="c.data.param.debug">
  <pre>{{c.data | json}}</pre>
</div>
]]></template>
    </sp_widget>
</record_update>
