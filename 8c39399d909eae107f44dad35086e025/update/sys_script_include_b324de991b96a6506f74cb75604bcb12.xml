<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_agenda.AgendaUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>AgendaUtil</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var AgendaUtil = Class.create();
AgendaUtil.prototype = {
    initialize: function(dayGr) {
        this.dayGr = dayGr; // The day record to use throughout
    },

    /*
     * Create a list of modules to display for this day
     * 
     * @param none
     * @return array - list of objects created
     *
     */
    makeModuleList: function() {

        var list = [];
        var dmGr = new GlideRecord(Constants.DAY_MODULE_M2M);
        dmGr.addQuery('day', this.dayGr.getUniqueValue());
        dmGr.orderBy('module.title');
        dmGr.query();

        while (dmGr.next()) {
            var moduleGr = dmGr.module.getRefRecord();
            var highlight = global.JSUtil.getBooleanValue(dmGr, 'highlight');
            list.push({
                "sys_id": moduleGr.getUniqueValue(),
                "title": dmGr.module.title.toString(),
                "short_description": dmGr.module.short_description.toString(),
                "display_value": moduleGr.getDisplayValue(),
                "student_notes": moduleGr.getValue('student_notes'),
                "class": highlight ? "moduleActive" : "moduleInactive"
            });
        }

        return list;

    },

    /*
     * Create a simple object describing the day section of the agenda
     * 
     * @param none
     * @return object - describing the name and modules available to the widget
     * 
     */
    makeDayObj: function() {

        var obj = {
            "name": this.dayGr.getDisplayValue(),
            "sys_id": this.dayGr.getUniqueValue(),
            "modules": this.makeModuleList()
        };

        return obj;

    },

    /*
     * Create a list of items to display in the "now" section of the agenda
     * 
     * @param none
     * @return array - sorted list of objects describing the 'now' items
     *
     */
    makeItemList: function() {

        var list = [];
        var dniGr = new GlideRecord(Constants.DAY_NOW_ITEM_M2M);
        dniGr.addQuery('day', this.dayGr.getUniqueValue());
        // dniGr.orderBy('item.order'); // Used post-sort as this sorts string values
        dniGr.query();

        while (dniGr.next()) {
            var nowItemGr = dniGr.now_item.getRefRecord();
            var durationSec = dniGr.now_item.duration.dateNumericValue() / 1000;
            list.push({
                "sys_id": dniGr.getUniqueValue(),
                "duration": durationSec,
                "durationStr": durationSec / 60 + "m",
                "title": dniGr.now_item.title.toString(),
                "short_description": dniGr.now_item.short_description.toString(),
                "student_notes": nowItemGr.getValue('student_notes'),
                "order": parseInt(dniGr.getValue("order"), 10),
                "display_value": nowItemGr.getDisplayValue()
            });
        }

        return list.sort((a, b) => a.order - b.order);

    },

    /*
     * Create an object of which items to display on the agenda
     * 
     * @param none
     * @return object - custom object of properties with true/false values
     * 
     */
    makeDisplayOptions: function() {

        var obj = {
            "day": global.JSUtil.getBooleanValue(this.dayGr, 'display_day_items'),
            "now": global.JSUtil.getBooleanValue(this.dayGr, 'display_now_items'),
            "timer": global.JSUtil.getBooleanValue(this.dayGr, 'display_timer')
        };

        return obj;

    },

    /*
     * Create an object that describes the day's agenda to be used by the Service Portal widget
     * 
     * @param boolean - true=create new log, false=use existing logs (if one exists)
     * @param boolean - true=clear the timer, false=use existing timer
	 * @param boolean - true=timer is current, don't recount items
     * @return object - custom object describing the day's properties and related objects
     * 
     */
    makeAgendaObj: function(updateID, clearTimer, timerIsCurrent) {

        var oldAgenda = JSON.parse(this.dayGr.getValue('agenda'));
        var session = gs.getSession();
        var zoneName = session.getTimeZoneName();
        var courseGr = this.dayGr.course.getRefRecord();
        // gs.info(`>>>DEBUG: old ID: ${oldAgenda.id} updateID=${updateID}`);

        var obj = {
            "id": (updateID || !oldAgenda.id) ? gs.generateGUID() : oldAgenda.id,
            "newlog": updateID,
            "course": {
                "name": courseGr.getDisplayValue(),
                "sys_id": courseGr.getUniqueValue(),
                "instructor": courseGr.instructor.getDisplayValue(),
                "sn_version": courseGr.servicenow_version.getDisplayValue()

            },
            "day": this.makeDayObj(),
            "now": this.makeItemList(),
            "display": this.makeDisplayOptions()
        };

        obj.timer = {};
        if (oldAgenda.hasOwnProperty('timer') && !clearTimer) {
            obj.timer = oldAgenda.timer;
        }
        var timerObj = this.makeTimerObj(obj.now);
        obj.timer.sum = 0;
        obj.timer.timezone = timerObj.timezone;
		if (obj.timer.state?.isCurrent != undefined) {
			obj.timer.state.isCurrent = timerIsCurrent; // tell the client whether to recount the time sum
		}

        return obj;

    },

    /*
     * Calculate the sum of a given list of durations (since GlideAggregate can't do it)
     * and other timer properties the widget needs
     * 
     * @param array - List of objects containing a 'duration' field (in seconds)
     * @return object - total sum of durations (in seconds) plus hours, minutes, seconds representation
     * 
     */
    makeTimerObj: function(itemList) {

        // Add up the sum of seconds
        var sec = 0;
        for (var i = 0; i < itemList.length; i++) {
            sec += itemList[i].duration;
        }

        // Get the time zone name
        var session = gs.getSession();
        var zoneName = session.getTimeZoneName();

        // Calculate the return time (string)
        /*
        var gdt = new GlideDateTime();
        gdt.addSeconds(sec);
        var glt = gdt.getLocalTime();
        var gld = gdt.getLocalDate();
        var returnAt = gld.getByFormat('YYYY-MM-dd') + 'T' +
           glt.getByFormat("HH:mm:ss");
		*/
        var obj = {
            "sum": sec,
            "timezone": zoneName
        };

        return obj;

    },

    /*
     * Add 5 minutes to the current now items
     *
     * @param string - course ID
     * @param integer - number of seconds to add
     * @return string - sys_id of the new m2m record
     * 
     */

    addExtensionToNowItems: function(courseID, secondsValue) {

        var m2mGr = new GlideRecord(Constants.DAY_NOW_ITEM_M2M);
        m2mGr.newRecord();
        m2mGr.setValue('day', this.dayGr.getUniqueValue());

        var extensionItemID = this.getTimeExtensionItemSysId(courseID, secondsValue);
        m2mGr.setValue('now_item', extensionItemID);
        m2mGr.setValue('order', 10000);
        var id = m2mGr.insert();

        return id;
    },

    /*
     * Get sys_id of 5 minute extension module record for this course
     *  (if it doesn't exist, create it)
     * 
     * @param string - sys_id of the course record
     * @return string - sys_id of the "extension" record
     * 
     */
    getTimeExtensionItemSysId: function(courseID, secondsVal) {

        var gd = new GlideDuration(secondsVal * 1000);
        var durationStr = gd.getByFormat("yyyy-MM-dd HH:mm:ss");

        var itemGr = new GlideRecord(Constants.NOW_ITEM_TABLE);
        itemGr.addQuery('course', courseID);
        itemGr.addQuery('title', 'Extension');
        itemGr.addQuery('duration', durationStr);
        itemGr.query();

        if (itemGr.next()) {
            return itemGr.getUniqueValue();
        }

        var newItemGr = new GlideRecord(Constants.NOW_ITEM_TABLE);
        newItemGr.newRecord();
        newItemGr.setValue('course', courseID);
        newItemGr.setValue('title', 'Extension');
        newItemGr.setValue('duration', durationStr);
        newItemGr.setValue('id_update', false);
        var id = newItemGr.insert();

        return id;
    },

    /*
     * Set the values for the field(s) that get automatically updated on data changes
     * 
     * @param boolean - true=create new log, false=use existing logs (if one exists)
     * @param boolean - true=clear the timer, false=use existing timer
     * @returns none
     *
     */
    autoUpdateTextFields: function(updateID, clearTimer, timerIsCurrent) {

        var agendaStr = JSON.stringify(this.makeAgendaObj(updateID, clearTimer, timerIsCurrent), null, 4);
        this.dayGr.setValue('agenda', agendaStr);
        this.dayGr.setValue('chat_text', this.makeChatText());

    },

    /*
     * Construct a string for the chat text
     *
     * @param none
     * @return string - formatted text to paste into the chat
     * 
     */
    makeChatText: function() {

        var agendaStr = this.dayGr.getValue('agenda');
        var agenda = JSON.parse(agendaStr);
        var output = '';

        var gdt = new GlideDateTime();
        gdt.addSeconds(agenda.timer.sum);
        var glt = gdt.getLocalTime();
        var returnAt = glt.getByFormat("hh:mm a");

        if (agenda.now.length > 0) {
            for (var i = 0; i < agenda.now.length; i++) {
                var item = agenda.now[i];
                output += `* ${item.display_value} (${item.durationStr})\n`;
            }
            output += `--> ${gs.getMessage('agenda-return-at')} ${returnAt}`;

        }

        return output;

    },

    type: 'AgendaUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>chuck.tomasi@gmail.com</sys_created_by>
        <sys_created_on>2025-06-22 01:14:26</sys_created_on>
        <sys_id>b324de991b96a6506f74cb75604bcb12</sys_id>
        <sys_mod_count>106</sys_mod_count>
        <sys_name>AgendaUtil</sys_name>
        <sys_package display_value="Agenda Builder" source="x_snc_agenda">8c39399d909eae107f44dad35086e025</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Agenda Builder">8c39399d909eae107f44dad35086e025</sys_scope>
        <sys_update_name>sys_script_include_b324de991b96a6506f74cb75604bcb12</sys_update_name>
        <sys_updated_by>chuck.tomasi@gmail.com</sys_updated_by>
        <sys_updated_on>2025-09-05 17:52:47</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>b324de991b96a6506f74cb75604bcb12</id>
        <sys_created_by>chuck.tomasi@gmail.com</sys_created_by>
        <sys_created_on>2025-06-22 01:14:26</sys_created_on>
        <sys_id>3cf41ed91b96a6506f74cb75604bcb94</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>chuck.tomasi@gmail.com</sys_updated_by>
        <sys_updated_on>2025-06-22 01:14:26</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
